"""Day 21: Keypad Conundrum

https://adventofcode.com/2024/day/21

+---+---+---+
| 7 | 8 | 9 |
+---+---+---+
| 4 | 5 | 6 |
+---+---+---+
| 1 | 2 | 3 |
+---+---+---+
    | 0 | A |
    +---+---+


    +---+---+
    | ^ | A |
+---+---+---+
| < | v | > |
+---+---+---+
"""

NUMERIC_KEYBOARD_MOVES = {
    # 0
    ('0', 'A'): ['>'],
    ('0', '1'): ['^<'],
    ('0', '2'): ['^'],
    ('0', '3'): ['^>', '>^'],
    ('0', '4'): ['^^<'],
    ('0', '5'): ['^^'],
    ('0', '6'): ['^^>', '>^^'],
    ('0', '7'): ['^^^<'],
    ('0', '8'): ['^^^'],
    ('0', '9'): ['^^^>', '>^^^'],

    # 1
    ('1', 'A'): ['>>v'],
    ('1', '0'): ['>v'],
    ('1', '2'): ['>'],
    ('1', '3'): ['>>'],
    ('1', '4'): ['^'],
    ('1', '5'): ['>^', '^>'],
    ('1', '6'): ['>>^', '^>>'],
    ('1', '7'): ['^^'],
    ('1', '8'): ['^^>', '>^^'],
    ('1', '9'): ['^^>>', '>>^^'],

    # 2
    ('2', 'A'): ['>v', 'v>'],
    ('2', '0'): ['v'],
    ('2', '1'): ['<'],
    ('2', '3'): ['>'],
    ('2', '4'): ['^<', '<^'],
    ('2', '5'): ['^'],
    ('2', '6'): ['^>', '>^'],
    ('2', '7'): ['^^<', '<^^'],
    ('2', '8'): ['^^'],
    ('2', '9'): ['^^>', '>^^'],

    # 3
    ('3', 'A'): ['v'],
    ('3', '0'): ['v<', '<v'],
    ('3', '1'): ['<<'],
    ('3', '2'): ['<'],
    ('3', '4'): ['^<<', '<<^'],
    ('3', '5'): ['^<', '<^'],
    ('3', '6'): ['^'],
    ('3', '7'): ['<<^^', '^^<<'],
    ('3', '8'): ['^^<', '<^^'],
    ('3', '9'): ['^^'],

    # 4
    ('4', 'A'): ['>>vv'],
    ('4', '0'): ['>vv'],
    ('4', '1'): ['v'],
    ('4', '2'): ['>v', 'v>'],
    ('4', '3'): ['>>v', 'v>>'],
    ('4', '5'): ['>'],
    ('4', '6'): ['>>'],
    ('4', '7'): ['^'],
    ('4', '8'): ['^>', '>^'],
    ('4', '9'): ['^>>', '>>^'],

    # 5
    ('5', 'A'): ['>vv', 'vv>'],
    ('5', '0'): ['vv'],
    ('5', '1'): ['v<', '<v'],
    ('5', '2'): ['v'],
    ('5', '3'): ['>v', 'v>'],
    ('5', '4'): ['<'],
    ('5', '6'): ['>'],
    ('5', '7'): ['^<', '<^'],
    ('5', '8'): ['^'],
    ('5', '9'): ['^>', '>^'],

    # 6
    ('6', 'A'): ['vv'],
    ('6', '0'): ['vv<', '<vv'],
    ('6', '1'): ['v<<', '<<v'],
    ('6', '2'): ['v<', '<v'],
    ('6', '3'): ['v'],
    ('6', '4'): ['<<'],
    ('6', '5'): ['<'],
    ('6', '7'): ['^<<', '<<^'],
    ('6', '8'): ['^<', '<^'],
    ('6', '9'): ['^'],

    # 7
    ('7', 'A'): ['>>vvv'],
    ('7', '0'): ['>vvv'],
    ('7', '1'): ['vv'],
    ('7', '2'): ['>vv', 'vv>'],
    ('7', '3'): ['>>vv', 'vv>>'],
    ('7', '4'): ['v'],
    ('7', '5'): ['>v', 'v>'],
    ('7', '6'): ['>>v', 'v>>'],
    ('7', '8'): ['>'],
    ('7', '9'): ['>>'],

    # 8
    ('8', 'A'): ['>vvv', 'vvv>'],
    ('8', '0'): ['vvv'],
    ('8', '1'): ['vv<', '<vv'],
    ('8', '2'): ['vv'],
    ('8', '3'): ['vv>', '>vv'],
    ('8', '4'): ['v<', '<v'],
    ('8', '5'): ['v'],
    ('8', '6'): ['v>', '>v'],
    ('8', '7'): ['<'],
    ('8', '9'): ['>'],

    # 9
    ('9', 'A'): ['vvv'],
    ('9', '0'): ['vvv<', '<vvv'],
    ('9', '1'): ['vv<<', '<<vv'],
    ('9', '2'): ['vv<', '<vv'],
    ('9', '3'): ['vv'],
    ('9', '4'): ['v<<', '<<v'],
    ('9', '5'): ['v<', '<v'],
    ('9', '6'): ['v'],
    ('9', '7'): ['<<'],
    ('9', '8'): ['<'],

    # A
    ('A', '0'): ['<'],
    ('A', '1'): ['^<<'],
    ('A', '2'): ['^<', '<^'],
    ('A', '3'): ['^'],
    ('A', '4'): ['^^<<'],
    ('A', '5'): ['^^<', '<^^'],
    ('A', '6'): ['^^'],
    ('A', '7'): ['^^^<<'],
    ('A', '8'): ['^^^<', '<^^^'],
    ('A', '9'): ['^^^'],
}

DIRECTIONAL_KEYBOARD_MOVES = {
    # A
    ('A', '^'): '<',
    ('A', '<'): 'v<<',
    ('A', '>'): 'v',
    ('A', 'v'): 'v<',

    # ^
    ('^', 'A'): '>',
    ('^', '<'): 'v<',
    ('^', '>'): 'v>',
    ('^', 'v'): 'v',

    # v
    ('v', 'A'): '^>',
    ('v', '<'): '<',
    ('v', '>'): '>',
    ('v', '^'): '^',

    # <
    ('<', 'A'): '>>^',
    ('<', 'v'): '>',
    ('<', '>'): '>>',
    ('<', '^'): '>^',

    # >
    ('>', 'A'): '^',
    ('>', 'v'): '<',
    ('>', '<'): '<<',
    ('>', '^'): '<^',
}


def get_numeric_code_paths(code='029A'):
    code = f'A{code}'
    paths = ['']

    for i, j in zip(code[:-1], code[1:]):
        new_paths = []

        if i != j:
            for foo in NUMERIC_KEYBOARD_MOVES[(i, j)]:
                for path in paths:
                    new_paths.append(path + foo + 'A')

        else:
            for path in paths:
                new_paths.append(path + 'A')

        paths = new_paths
    return set(paths)


def get_directional_code_path(code='<A^A>^^AvvvA'):
    code = f'A{code}'
    path = ''
    for i, j in zip(code[:-1], code[1:]):
        if i != j:
            path += DIRECTIONAL_KEYBOARD_MOVES[(i, j)]
        path += 'A'
    return path


def get_path_value(code):
    result_codes_numeric = get_numeric_code_paths(code)
    foo = []
    for i in result_codes_numeric:
        bar = get_directional_code_path(i)
        bar = get_directional_code_path(bar)
        foo.append(bar)
    result_code = sorted(foo, key=len)[0]
    return int(code.replace('A', '')) * len(result_code)


def solve(data):
    data = data.strip().split('\n')
    return sum([get_path_value(code) for code in data])


if __name__ == '__main__':
    input_data = open('input_data.txt').read()
    result = solve(input_data)
    print(f'Example1: {result}')
